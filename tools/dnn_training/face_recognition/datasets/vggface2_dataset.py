import os

from PIL import Image

from torch.utils.data import Dataset


LFW_OVERLAPPED_VGGFACE2_CLASS_NAMES = ['n000021', 'n000137', 'n000172', 'n000184', 'n000195', 'n000199', 'n000220', 'n000242', 'n000255', 'n000272', 'n000281', 'n000297', 'n000310', 'n000359', 'n000373', 'n000379', 'n000402', 'n000420', 'n000427', 'n000429', 'n000483', 'n000560', 'n000562', 'n000568', 'n000645', 'n000667', 'n000692', 'n000709', 'n000712', 'n000755', 'n000780', 'n000810', 'n000816', 'n000817', 'n000835', 'n000887', 'n000888', 'n000902', 'n000906', 'n000912', 'n000946', 'n000947', 'n001042', 'n001048', 'n001051', 'n001054', 'n001057', 'n001060', 'n001091', 'n001095', 'n001096', 'n001105', 'n001106', 'n001110', 'n001111', 'n001113', 'n001142', 'n001143', 'n001155', 'n001156', 'n001159', 'n001171', 'n001200', 'n001228', 'n001235', 'n001243', 'n001257', 'n001288', 'n001309', 'n001329', 'n001360', 'n001367', 'n001379', 'n001387', 'n001419', 'n001434', 'n001437', 'n001473', 'n001478', 'n001538', 'n001540', 'n001547', 'n001548', 'n001551', 'n001567', 'n001568', 'n001595', 'n001607', 'n001642', 'n001656', 'n001663', 'n001695', 'n001698', 'n001700', 'n001727', 'n001775', 'n001779', 'n001781', 'n001795', 'n001805', 'n001813', 'n001825', 'n001839', 'n001873', 'n001874', 'n001934', 'n001962', 'n001968', 'n001971', 'n001986', 'n002017', 'n002018', 'n002019', 'n002025', 'n002028', 'n002038', 'n002056', 'n002057', 'n002067', 'n002081', 'n002094', 'n002120', 'n002133', 'n002135', 'n002141', 'n002173', 'n002178', 'n002227', 'n002244', 'n002251', 'n002259', 'n002269', 'n002272', 'n002274', 'n002278', 'n002298', 'n002310', 'n002316', 'n002342', 'n002356', 'n002360', 'n002388', 'n002391', 'n002413', 'n002452', 'n002454', 'n002460', 'n002465', 'n002471', 'n002478', 'n002494', 'n002497', 'n002537', 'n002547', 'n002572', 'n002574', 'n002595', 'n002630', 'n002654', 'n002666', 'n002673', 'n002684', 'n002725', 'n002759', 'n002782', 'n002814', 'n002844', 'n002854', 'n002868', 'n002947', 'n002969', 'n002982', 'n003013', 'n003020', 'n003022', 'n003039', 'n003098', 'n003101', 'n003147', 'n003186', 'n003198', 'n003205', 'n003206', 'n003212', 'n003228', 'n003257', 'n003266', 'n003303', 'n003311', 'n003353', 'n003359', 'n003360', 'n003363', 'n003383', 'n003385', 'n003391', 'n003392', 'n003422', 'n003426', 'n003474', 'n003476', 'n003523', 'n003619', 'n003623', 'n003628', 'n003648', 'n003671', 'n003685', 'n003689', 'n003709', 'n003712', 'n003724', 'n003728', 'n003749', 'n003756', 'n003767', 'n003785', 'n003803', 'n003806', 'n003816', 'n003817', 'n003820', 'n003866', 'n003876', 'n003879', 'n003880', 'n003885', 'n003904', 'n003908', 'n003912', 'n003937', 'n003946', 'n003952', 'n003969', 'n003972', 'n003973', 'n003974', 'n003979', 'n003982', 'n004014', 'n004020', 'n004030', 'n004043', 'n004081', 'n004083', 'n004084', 'n004106', 'n004132', 'n004144', 'n004150', 'n004151', 'n004154', 'n004181', 'n004197', 'n004198', 'n004204', 'n004216', 'n004218', 'n004220', 'n004231', 'n004236', 'n004263', 'n004327', 'n004328', 'n004375', 'n004407', 'n004408', 'n004429', 'n004439', 'n004451', 'n004457', 'n004480', 'n004481', 'n004488', 'n004580', 'n004588', 'n004617', 'n004644', 'n004646', 'n004651', 'n004652', 'n004661', 'n004674', 'n004703', 'n004715', 'n004720', 'n004737', 'n004756', 'n004781', 'n004782', 'n004841', 'n004844', 'n004861', 'n004893', 'n004902', 'n004905', 'n004949', 'n004990', 'n005009', 'n005026', 'n005035', 'n005053', 'n005054', 'n005056', 'n005057', 'n005060', 'n005098', 'n005104', 'n005106', 'n005110', 'n005116', 'n005123', 'n005136', 'n005140', 'n005159', 'n005196', 'n005203', 'n005204', 'n005206', 'n005208', 'n005212', 'n005219', 'n005226', 'n005227', 'n005248', 'n005292', 'n005400', 'n005423', 'n005491', 'n005531', 'n005588', 'n005642', 'n005659', 'n005662', 'n005666', 'n005690', 'n005726', 'n005737', 'n005745', 'n005761', 'n005762', 'n005770', 'n005815', 'n005831', 'n005836', 'n005846', 'n005874', 'n005933', 'n005946', 'n005948', 'n005949', 'n005950', 'n005983', 'n005985', 'n005988', 'n006003', 'n006004', 'n006008', 'n006013', 'n006015', 'n006047', 'n006048', 'n006055', 'n006061', 'n006073', 'n006083', 'n006103', 'n006110', 'n006111', 'n006120', 'n006155', 'n006158', 'n006160', 'n006221', 'n006234', 'n006236', 'n006246', 'n006260', 'n006348', 'n006350', 'n006359', 'n006363', 'n006374', 'n006380', 'n006384', 'n006386', 'n006395', 'n006408', 'n006414', 'n006512', 'n006592', 'n006604', 'n006662', 'n006691', 'n006695', 'n006696', 'n006699', 'n006716', 'n006720', 'n006784', 'n006793', 'n006827', 'n006840', 'n006846', 'n006860', 'n006868', 'n006910', 'n006913', 'n006922', 'n006928', 'n006933', 'n006935', 'n006966', 'n006969', 'n006970', 'n007009', 'n007024', 'n007075', 'n007122', 'n007123', 'n007157', 'n007166', 'n007188', 'n007190', 'n007213', 'n007226', 'n007242', 'n007277', 'n007300', 'n007320', 'n007326', 'n007331', 'n007352', 'n007356', 'n007357', 'n007366', 'n007383', 'n007389', 'n007399', 'n007402', 'n007412', 'n007428', 'n007461', 'n007476', 'n007493', 'n007501', 'n007510', 'n007565', 'n007574', 'n007581', 'n007584', 'n007595', 'n007596', 'n007613', 'n007616', 'n007620', 'n007623', 'n007645', 'n007679', 'n007704', 'n007712', 'n007787', 'n007794', 'n007801', 'n007847', 'n007901', 'n007974', 'n007980', 'n007981', 'n008018', 'n008065', 'n008079', 'n008127', 'n008162', 'n008166', 'n008180', 'n008205', 'n008215', 'n008239', 'n008242', 'n008272', 'n008277', 'n008316', 'n008333', 'n008347', 'n008428', 'n008431', 'n008446', 'n008466', 'n008496', 'n008524', 'n008545', 'n008551', 'n008556', 'n008557', 'n008568', 'n008575', 'n008592', 'n008614', 'n008638', 'n008646', 'n008658', 'n008659', 'n008679', 'n008690', 'n008707', 'n008708', 'n008725', 'n008782', 'n008791', 'n008814', 'n008839', 'n008859', 'n008865', 'n008893', 'n008902', 'n008917', 'n008927', 'n008999', 'n009008', 'n009050', 'n009139', 'n009179', 'n009283']


class Vggface2Dataset(Dataset):
    def __init__(self, root, split, transforms=None, ignored_classes=None):
        images_path = os.path.join(root, 'images')
        if ignored_classes is None:
            ignored_classes = []

        self._class_names = [o for o in os.listdir(images_path) if os.path.isdir(os.path.join(images_path, o))]
        self._class_names = list(set(self._class_names) - set(ignored_classes))
        self._class_names.sort()

        if split == 'training':
            self._all_images, self._images_by_class = self._list_images(root, 'train.txt')
        elif split == 'validation':
            self._all_images, self._images_by_class = self._list_images(root, 'validation.txt')
        else:
            raise ValueError('Invalid split')

        self._transforms = transforms

    def _list_images(self, root, filename):
        class_indexes_by_class_name = {self._class_names[i]: i for i in range(len(self._class_names))}

        with open(os.path.join(root, filename), 'r') as image_file:
            images_lines = [line.strip() for line in image_file.readlines()]

        images = []
        images_by_class = [[] for _ in self._class_names]
        for images_line in images_lines:
            class_name, filename = images_line.split(' ')
            if class_name not in class_indexes_by_class_name:
                continue

            class_index = class_indexes_by_class_name[class_name]
            sound_index = len(images)
            images.append({
                'path': os.path.join(root, 'images', class_name, filename),
                'class_index': class_index
            })
            images_by_class[class_index].append({'index': sound_index})

        return images, images_by_class

    def __len__(self):
        return len(self._all_images)

    def __getitem__(self, index):
        image = Image.open(self._all_images[index]['path']).convert('RGB')
        if self._transforms is not None:
            image = self._transforms(image)

        return image, self._all_images[index]['class_index']

    def lens_by_class(self):
        return [len(x) for x in self._images_by_class]

    def get_all_indexes(self, class_, index):
        return self._images_by_class[class_][index]['index']

    def transforms(self):
        return self._transforms
